import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

//createAsyncThunk is a Redux Toolkit utility that simplifies handling asynchronous logic (like API calls).
// fetchProducts is an async thunk that:
// Takes two arguments: a string action type prefix ("products/fetchProducts") and an async callback function.
// The callback function makes an HTTP request to the API using axios.get().
// If the request is successful, it returns the response data (response.data).
// createAsyncThunk automatically generates three action types:
// products/fetchProducts/pending (when the request starts)
// products/fetchProducts/fulfilled (when the request succeeds)
// products/fetchProducts/rejected (when the request fails)

export const fetchProducts = createAsyncThunk(
  "products/fetchProducts",
  async () => {
    const response = await axios.get("https://fakestoreapi.com/products");
    console.log(response);
    return response.data;
  }
);

const productSlice = createSlice({
  //createSlice creates a slice of the Redux store, managing a specific part of the state.
  name: "products",
  initialState: {
    items: [],
    status: "idle", // 'idle', 'loading', 'succeeded', 'failed'
    error: null,
  },
  reducers: {}, // In this case, we don't have any synchronous reducers that directly modify the items array. All state changes are handled by the asynchronous fetchProducts thunk.

  // ExtraReducers allows you to handle actions that are created outside of the slice, such as those generated by createAsyncThunk.
  // This is where we listen for the pending, fulfilled, and rejected actions generated by fetchProducts.
  extraReducers: (builder) => {
    // The builder argument is an object provided by Redux Toolkit that simplifies adding cases to extraReducers.
    // builder.addCase(actionCreator, reducer):
    // actionCreator: The action type to listen for (e.g., fetchProducts.pending).
    // reducer: A function that updates the state based on the action.
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.status = "succeeded";
        state.items = action.payload;
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.status = "failed";
      });
  },
});

export default productSlice.reducer;


// createAsyncThunk simplifies asynchronous operations.
// extraReducers handles actions generated by createAsyncThunk (and other external actions).
// The builder pattern provides a type-safe and convenient way to add cases to extraReducers.