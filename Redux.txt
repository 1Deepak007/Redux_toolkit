                        Redux & RTK

Action     -  Data sent from UI is action.   { type: 'ADD_TODO', payload: { id: 1, text: 'Learn Redux' } }
Reducer    -  Reducer stores data of action in store. It is a pure function that takes the current state and an action as arguments and returns the new state.
Store      -  Data stored here. We configure data here. It is the centralised place from where all states are managed
Dispatcher -  is a function provided by Redux (dispatch) that sends the action to the reducer.    dispatch({ type: 'ADD_TODO', payload: { id: 1, text: 'Learn Redux' } });
Selector   -  is a function that extracts specific pieces of data from the Redux store.



UI ----(dispatch data)---->Action(data to be stored in redux)---->Reducer(stores data in store)---->Store(provides data and contains states)--->  UI

-------------------------------------------------------------------


npx create-next-app@latest
npm i react-redux
npm i @reduxjs/toolkit react redux

Run: npm run dev


* Redux don't pesrist its data when we refresh application, but it can be done using redux-persist library.
* Dataflow of Redux is unidirectional         UI----(dispatch)---->Action---->Reducers---->Store----(subscribe)---->UI


-------------------------------------------------------------------


npx create-react-app@latest redux_toolkit

Redux --> npm i react-redux



If want to pass prop from parent to n'th child, we either pass to each component or we can use context_api.
Or we can use



Store - is the centralised place from where all states are managed.
        The store is a single, immutable JavaScript object that holds the entire state of your application. Think of it as the "single source of truth" for all the data your application needs. It's like a central database, but in memory.
        Purpose:
            Holds the state: It's the container for all your application's data.
            Provides access to state: Components can read the current state from the store.   
            Allows state updates: The store is the only place where state updates can happen (through dispatching actions, which we'll get to).
            Notifies subscribers: When the state changes, the store notifies any components that are "subscribed" to it, so they can re-render with the new data.

Reducer - A reducer is a pure function that takes the current state and an "action" as arguments, and returns a new state. It's the mechanism by which the state is actually updated.   
          Handles state updates: Reducers determine how the state changes in response to an action.


"useSelector" and "useDispatch" are React hooks provided by react-redux that connect your React components to the Redux store.

    useSelector:
            Purpose: Extracts data from the Redux store and makes it available to your component as props. It's how your component "reads" data from the store.  

    useDispatch:
            Purpose: Provides a reference to the dispatch function from the Redux store. This allows your component to dispatch actions, which are the only way to trigger state updates in Redux. It's how your component "writes" to the store (indirectly, through actions).   
            How it works: useDispatch returns the dispatch function itself. You can then call dispatch with an action object to update the state.
            Re-renders: useDispatch itself does not cause re-renders. However, dispatching an action will likely cause a re-render because the state will change, and components using useSelector to access that state will re-render.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                   UI
                        -------------------------
                        |                       |
                        | [Cick Me Btn]     0   |
                        |                Count  |
                        |_______________________|

[on click] --> handleClick() --> action_dispatch --> store --> reducer function called --> state updated by reducer's logic --> Store (updated state) --> UI update


->Action : [event info + additional info (payload)] 
           is event (like onClick, onHover etc). Plane object that contain payload(data comming with action like some value) and event data 

->Slice  : my app can have multiple features like authentication, counting etc, logic for maintaining each feature's state is written in slice. Initial state and reducer functions are defined here.
->Reducer : function containing logic for updating data/state.
->Store  : centralised place where states are managed.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                                    action
[increment button] --> handleClick() --> dispatch(increment()) --> Store(action(state count=0)) --> Reducer (action[increment()]) --> increment(will increase/update count) --> UI update

